package tg_service

import (
	"fmt"
	"myapp/internal/models"
	"myapp/pkg/files"
	my_regex "myapp/pkg/regex"
	"strconv"
	"strings"
	"time"
)

func (srv *TgService) HandleMessage(m models.Update) error {
	msgText := m.Message.Text
	fromUsername := m.Message.From.UserName
	fromId := m.Message.From.Id
	srv.l.Info(fmt.Sprintf("HandleMessage: fromId-%d fromUsername-%s, msgText-%s", fromId, fromUsername, msgText))

	srv.SendMsgToServer(fromId, "user", msgText)

	if msgText == "/admin" {
		err := srv.M_admin(m)
		if err != nil {
			srv.SendMessage(fromId, ERR_MSG)
			srv.SendMessage(fromId, err.Error())
		}
		return err
	}

	user, err := srv.Db.GetUserById(fromId)
	if err != nil {
		return fmt.Errorf("HandleMessage GetUserById err: %v", err)
	}
	// if user.Id != 0 && user.Lives == 0 {
	// 	return nil
	// }

	if msgText == "/help" {
		srv.SendMessageAndDb(fromId, "@millioner_support\n–≤–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏")
		srv.Db.UpdateLatsActiontime(fromId)
		srv.Db.UpdateFeedbackTime(fromId)
		return nil
	}

	if user.IsLastPush == 1 {
		srv.SendMessageAndDb(fromId, "–±–æ—Ç –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
		return nil
	}

	if strings.HasPrefix(msgText, "/start") { // https://t.me/tgbotusername?start=ref01 -> /start ref01
		err := srv.M_start(m)
		if err != nil {
			srv.SendMessageAndDb(fromId, ERR_MSG)
			srv.SendMessageAndDb(fromId, err.Error())
		}
		srv.Db.UpdateLatsActiontime(fromId)
		srv.Db.UpdateFeedbackTime(fromId)
		return err
	}

	if strings.HasPrefix(msgText, "add_am_") { // add_am_1.1_
		animMessId := my_regex.GetStringInBetween(msgText, "add_am_", "_")
		if animMessId == "" {
			return fmt.Errorf("–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π animMessId")
		}
		srv.Db.EditBotState(fromId, msgText)
		srv.SendMessage(fromId, fmt.Sprintf("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è animMessId %v", animMessId))
		return nil
	}

	err = srv.M_state(m)
	if err != nil {
		srv.SendMessageAndDb(fromId, ERR_MSG)
		srv.SendMessageAndDb(fromId, err.Error())
	}
	srv.Db.UpdateLatsActiontime(fromId)
	srv.Db.UpdateFeedbackTime(fromId)
	return err
}

func (srv *TgService) M_start(m models.Update) error {
	fromId := m.Message.Chat.Id
	msgText := m.Message.Text
	fromFirstName := m.Message.From.FirstName
	fromUsername := m.Message.From.UserName
	srv.l.Info(fmt.Sprintf("M_start: fromId: %d, fromUsername: %s, msgText: %s", fromId, fromUsername, msgText))

	refArr := strings.Split(msgText, " ")
	ref := ""
	if len(refArr) > 1 {
		ref = refArr[1]
	}

	// user, err := srv.Db.GetUserById(fromId)
	// if err != nil {
	// 	return fmt.Errorf("M_start GetUserById err: %v", err)
	// }
	// if user.CreatedAt != "" && srv.IsIgnoreUser(fromId) {
	// 	text := "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –∏ –±–æ—Ç –¥–ª—è –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /help"
	// 	srv.SendMessageAndDb(fromId, text)
	// 	return nil
	// }

	err := srv.Db.AddNewUser(fromId, fromUsername, fromFirstName)
	if err != nil {
		return fmt.Errorf("M_start AddNewUser err: %v", err)
	}
	srv.Db.EditRef(fromId, ref)
	if fromId == 1394096901 {
		srv.Db.EditAdmin(fromId, 1)
	}
	srv.Db.EditBotState(fromId, "")
	srv.Db.EditLives(fromId, 3)
	srv.Db.EditStep(fromId, "1")
	srv.SendMessageAndDb(fromId, fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s üëã", fromFirstName))
	// srv.SendAnimMessageHTML("1", fromId, animTimeout3000)

	// time.Sleep(time.Millisecond * time.Duration(animTimeoutTest))

	// text := "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä—É –∏ –∑–∞–±–∏—Ä–∞–π –±–æ–Ω—É—Å 1000‚ÇΩ –∑–∞ —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç! üöÄ"
	// replyMarkup := `{"inline_keyboard" : [
	// 	[{ "text": "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", "callback_data": "start_game" }]
	// ]}`
	// srv.SendMessageWRM(fromId, text, replyMarkup)
	
	// srv.SendMsgToServer(fromId, "bot", text)

	futureJson := map[string]string{
		"video_note":   fmt.Sprintf("@%s", "./files/krug_1.mp4"),
		"chat_id": strconv.Itoa(fromId),
	}
	cf, body, err := files.CreateForm(futureJson)
	if err != nil {
		return fmt.Errorf("HandleVideoNote CreateFormV2 err: %v", err)
	}
	srv.SendVideoNote(body, cf)

	srv.Db.EditBotState(fromId, "read_article_after_KNB_win")
	time.Sleep(time.Second*20)
	srv.SendMessage(fromId, "–í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∏–∂–µ üëáüèª")

	return nil
}

func (srv *TgService) M_state(m models.Update) error {
	fromId := m.Message.Chat.Id
	msgText := m.Message.Text
	fromUsername := m.Message.From.UserName
	srv.l.Info(fmt.Sprintf("M_state: fromId: %d, fromUsername: %s, msgText: %s", fromId, fromUsername, msgText))

	user, err := srv.Db.GetUserById(fromId)
	if err != nil {
		srv.l.Warn(fmt.Errorf("M_state GetUserById err: %v", err))
	}
	srv.Db.UpdateLatsActiontime(fromId)
	if user.BotState == "" {
		return nil
	}

	if strings.HasPrefix(user.BotState, "add_am_") {
		animMessId := my_regex.GetStringInBetween(user.BotState, "add_am_", "_")
		animMess, err := srv.Db.GetAminMessByTxtId(animMessId)
		if err != nil {
			return fmt.Errorf("M_state GetAminMessByTxtId err: %v", err)
		}

		srv.l.Info("m.Message.Entities:", m.Message.Entities)
		srv.SendMessage(fromId, fmt.Sprintf("%+v", m.Message.Entities))

		// for _, v := range m.Message.Entities {
		// 	entityType := v.Type
		// 	entityStart := v.Offset
		// 	entityEnd := v.Offset + v.Length
		// 	var entityStartSymb string
		// 	var entityEndSymb string
		// 	if entityType == "bold" {
		// 		entityStartSymb = "<b>"
		// 		entityEndSymb = "</b>"
		// 	}
		// 	if entityType == "underline" {
		// 		entityStartSymb = "<u>"
		// 		entityEndSymb = "</u>"
		// 	}
		// 	for i := len([]rune(msgText)); i > 0; i-- {
		// 		if i == entityEnd 
		// 	}
		// }

		if animMess.TxtId != "" {
			err = srv.Db.EditAnimMessText(animMessId, msgText)
			if err != nil {
				return fmt.Errorf("M_state EditAnimMessText err: %v", err)
			}
			srv.SendMessage(fromId, "–ø–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
			srv.Db.EditBotState(fromId, "")
			return nil
		}
		err = srv.Db.AddNewAminMess(animMessId, msgText)
		if err != nil {
			return fmt.Errorf("M_state AddNewAminMess err: %v", err)
		}
		srv.SendMessage(fromId, "–ø–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
		srv.Db.EditBotState(fromId, "")
		return nil
	}

	if user.BotState == "read_article_after_KNB_win" { // –ì–æ, –∫–æ, –∫–æ—É, –≥–æ—É, –≥—ç—É
		if !strings.HasPrefix(strings.ToLower(msgText), "–≥–æ—É") && !strings.HasPrefix(strings.ToLower(msgText), "–≥–æ") && !strings.HasPrefix(strings.ToLower(msgText), "–∫–æ") && !strings.HasPrefix(strings.ToLower(msgText), "–∫–æ—É") && !strings.HasPrefix(strings.ToLower(msgText), "–≥—ç—É") && !strings.HasPrefix(strings.ToLower(msgText), "go") {
			srv.SendMessageAndDb(fromId, "‚ùå –í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, —Å–≤–µ—Ä—å—Ç–µ—Å—å —Å –ª–æ–Ω–≥—Ä–∏–¥–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
			return nil
		}

		srv.Db.EditBotState(fromId, "")
		// srv.SendAnimMessage("-1", fromId, animTimeout250)
		// srv.SendBalance(fromId, "30.000", animTimeout250)
		// srv.Db.EditStep(fromId, "9")
		// srv.SendAnimMessageHTML("9", fromId, animTimeoutTest)

		text := "–ù—É —á—Ç–æ, –ø–æ–µ—Ö–∞–ª–∏, –æ—Ç–≤–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞ –∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è —Å–º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 500.000‚ÇΩ üòè"
		srv.SendMessage(fromId, text)
		err = srv.ShowMilQ(fromId, 1)
		if err != nil {
			return fmt.Errorf("M_state ShowMilQ err: %v", err)
		}

		// text := "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å üòè\n–ó–∞ –Ω–µ–≥–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å +25.000‚ÇΩ –∫ –±–∞–Ω–∫—Éüí∏"
		// replyMarkup :=`{"inline_keyboard" : [
		// 	[ { "text": "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º", "callback_data": "show_q_3_" } ]
		// ]}`
		// srv.SendMessageWRM(fromId, text, replyMarkup)

		// srv.ShowMilQ(fromId, 2)
		// srv.Db.EditStep(fromId, "7")
		// srv.SendMsgToServer(fromId, "bot", text)
		return nil
	}

	if user.BotState == "read_article_after_OIR_win" {
		if !strings.HasPrefix(strings.ToLower(msgText), "—Ä–µ–∑") && !strings.HasPrefix(strings.ToLower(msgText), "—Ä–∏–∑") {
			srv.SendMessageAndDb(fromId, "‚ùå –í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, —Å–≤–µ—Ä—å—Ç–µ—Å—å —Å –ª–æ–Ω–≥—Ä–∏–¥–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
			return nil
		}

		// text := "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å üòè\n–ó–∞ –Ω–µ–≥–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å +25.000‚ÇΩ –∫ –±–∞–Ω–∫—Éüí∏"
		// replyMarkup := `{"inline_keyboard" : [
		// 	[{ "text": "–ï—Å—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ! –ü–æ–≥–Ω–∞–ª–∏!", "callback_data": "show_q_3_" }]
		// ]}`
		// srv.SendMessageWRM(fromId, text, replyMarkup)
		// srv.Db.EditStep(fromId, text)
		srv.Db.EditBotState(fromId, "")
		srv.SendAnimMessage("-1", fromId, animTimeout250)
		srv.SendBalance(fromId, "55.000", animTimeoutTest)
		srv.SendAnimMessageHTML("11", fromId, animTimeoutTest)
		srv.Db.EditStep(fromId, "11")
		srv.SendMsgToServer(fromId, "bot", "11 —à–∞–≥")

		srv.ShowMilQ(fromId, 4)

		return nil
	}

	if user.BotState == "read_article_after_TrurOrFalse_win" {
		if !strings.HasPrefix(strings.ToLower(msgText), "—Å–∏–Ω") {
			srv.SendMessageAndDb(fromId, "‚ùå –í—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, —Å–≤–µ—Ä—å—Ç–µ—Å—å —Å –ª–æ–Ω–≥—Ä–∏–¥–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
			return nil
		}

		srv.Db.EditBotState(fromId, "")
		srv.SendBalance(fromId, "100.000", animTimeoutTest)
		srv.SendAnimMessageHTML("13", fromId, animTimeoutTest)
		srv.Db.EditStep(fromId, "13")
		time.Sleep(time.Second)

		text :=  "–ï—Å–ª–∏ —Ç—ã –∏–∑—É—á–∏–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–æ —Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –º–æ–∂–µ—à—å –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É üè¶ –Ω–∞ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –±–æ–ª–µ–µ 500.000‚ÇΩ —á–∏—Å—Ç—ã–º–∏ –∑–∞ —Ä–∞–∑ üí∏\n\n–ü–ª–∞—Ç–∏—Ç—å –º–Ω–µ –≤–ø–µ—Ä–µ–¥ –Ω–µ –Ω—É–∂–Ω–æ, –ø—Ä–∏–±—ã–ª—å –ø–æ–¥–µ–ª–∏–º –ø–æ–ø–æ–ª–∞–º. –ù–æ –ø–æ—Ç–æ—Ä–æ–ø–∏—Å—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã—Ç–∞—â–∏—Ç—å –ø—Ä–∏–±—ã–ª—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –≤–µ–¥—å —Å–∫–æ—Ä–æ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è"
		replyMarkup := `{"inline_keyboard" : [
			[{ "text": "–ó–∞–±—Ä–∞—Ç—å —Å—Ö–µ–º—É", "url": "https://t.me/threeprocentsclub_bot" }]
		]}`
		srv.SendMessageWRM(fromId, text, replyMarkup)
		// srv.Db.EditStep(fromId, text)
		srv.SendMsgToServer(fromId, "bot", text)
		srv.Db.EditLatsActiontime(fromId, "")
		srv.Db.EditIsFinal(fromId, 1)
		
		return nil
	}

	return nil
}

func (srv *TgService) M_admin(m models.Update) error {
	fromId := m.Message.Chat.Id
	msgText := m.Message.Text
	fromUsername := m.Message.From.UserName
	srv.l.Info(fmt.Sprintf("M_start: fromId: %d, fromUsername: %s, msgText: %s", fromId, fromUsername, msgText))

	u, err := srv.Db.GetUserById(fromId)
	if err != nil {
		return fmt.Errorf("M_start GetUserById err: %v", err)
	}
	if u.Id == 0 {
		srv.SendMessage(fromId, "–ù–∞–∂–º–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start")
	}
	if u.IsAdmin != 1 {
		return fmt.Errorf("_______")
	}
	err = srv.ShowAdminPanel(fromId)

	return err
}
